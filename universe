#!/bin/bash
# Variable and constant declaration
curDir=$(dirname "$(realpath "$0")")
ext=$([ "$(uname)" = "Darwin" ] && echo "__macOS" || echo "__linux")
localPath="local"
serverClientPath="server/client"
serverHostPath="server/host"
## Color
colorOff='\033[0m'
colorBoldGreen='\033[1;32m'
colorBoldRed='\033[1;31m'
colorBoldWhite='\033[1;37m'
colorBoldYellow='\033[1;33m'


# Function declaration
checkOptionsExist() {
	if [ $# -eq 0 ]
	then
		displayHelp
		exit 0
	fi
}

checkSecondaryOptions() {
	mode=$1
	option=$2
	ext=$3
	flag=false
	for arg in ${@:4}
	do
		fail=false
		if [ $arg != '-s' ]
		then
			if [ $option = "list" ]
			then
				if [ $arg != "install" ] && [ $arg != "link" ] && [ $arg != "command" ] && [ $arg != "upgrade" ]
				then
					fail=true
				fi
			else
				if [ $(cat "$curDir/build/$mode/Makefile" | grep -w "$option-$arg:" | wc -l) = 0 ] && [ $(cat "$curDir/build/$mode/Makefile" | grep -w "$option-$arg$ext:" | wc -l) = 0 ]
				then
					fail=true
				fi
			fi
			if [ $fail = true ]
			then
				if [ $flag = false ]
				then
					echo
					flag=true
				fi
				echo -e "${colorBoldRed}Error:${colorOff} ${colorBoldWhite}'$arg'${colorOff} not recognized by ${colorBoldWhite}'$option'${colorOff}."
			fi
		fi
	done
	if [ $flag = true ]
	then
		exit 3
	fi
}

checkSecondaryOptionsExist() {
	option=$1
	if [ $# -eq 2 ] && [ $option != "list" ] && [ $option != "install" ] && [ $option != "link" ] && [ $option != "upgrade" ]
	then
		echo
		echo -e "${colorBoldRed}Error:${colorOff} No option is given to ${colorBoldWhite}'$option'${colorOff}."
		exit 3
	fi
}

checkValidMainOption() {
	option=$1
	mainOptions=("install" "upgrade" "link" "command" "list" "update" "--help" "-h" "--prefix" "-p")
	flag=false
	for mainOption in ${mainOptions[@]}
	do
		if [ $option = $mainOption ]
		then
			flag=true
			break
		fi
	done
	if [ $flag = false ]
	then
		echo -e "${colorBoldRed}Error:${colorOff} ${colorBoldWhite}'$option'${colorOff} not recognized by ${colorBoldWhite}Universe${colorOff}."
		exit 3
	fi
}

displayHelp() {
	if [ $# -eq 0 ]
	then
		echo "Universe: your world always with you."
		echo
		echo "Syntax: universe [options]"
		echo
		echo "Options:"
		echo "    install		   Installs a given software handled by Universe and related"
		echo "			   to your OS. If nothing is given, it installs all software"
		echo "			   related to your OS."
		echo "    upgrade		   Updates a software installed with 'install'. If nothing is"
		echo "			   given, it updates all software handled by Universe and"
		echo "			   related to your OS."
		echo "    link		   Setups a configuration file handled by Universe and"
		echo "             		   related to your OS for a given software. If nothing is"
		echo "			   given, it setups all configuration files related to your"
		echo "			   OS."
		echo "    command         	   Applies a command for a specific software, according to"
		echo "             		   your OS."
		echo "    list		   Shows the available options for 'install', 'upgrade', 'link'"
		echo "			   and 'command' related to your OS. If nothing is given, it" 
		echo "			   shows all the options for 'install', 'upgrade', 'link' and"
		echo "			   'command' related to your OS."
		echo "    -p, --prefix		   Prints the path of Universe folder."
		echo "    -h, --help		   Prints this help."
	elif [ $1 = "install" ]
	then
		echo "install help"
	elif [ $1 = "upgrade" ]
	then
		echo "upgrade help"
	elif [ $1 = "link" ]
	then
		echo "link help"
	elif [ $1 = "command" ]
	then
		echo "command help"
	elif [ $1 = "list" ]
	then
		echo "list help"
	elif [ $1 = "update" ]
	then
		echo "update help"
	fi
}

displayMode() {
	mode=$1
	if [ $mode = $localPath ]
	then
		echo -e "${colorBoldWhite}Mode:${colorOff} ${colorBoldGreen}Local${colorOff}"
	elif [ $mode = $serverClientPath ]
	then
		echo -e "${colorBoldWhite}Mode:${colorOff} ${colorBoldYellow}Server (Client)${colorOff}"
	else
		echo -e "${colorBoldWhite}Mode:${colorOff} ${colorBoldRed}Server (Host)${colorOff}"
	fi
}

displayPrefix() {
	echo $curDir
}

displayWarnings() {
	mode=$1
	option=$2
	ext=$3
	displayWarningServerButNotSSH $mode ${@:4}
}

displayWarningServerButNotSSH() {
	mode=$1
	if [ $mode = $localPath ]
	then
		for arg in "${@:2}"
			do
				if [ $arg = "-s" ]
				then
					echo -e "${colorBoldYellow}Warning:${colorOff} ${colorBoldWhite}'-s' option is only available on remote machine. Ignored.${colorOff}"
					break
				fi
		done
	fi
}

execOptions() {
	mode=$1
	option=$2
	ext=$3
	for arg in ${@:4}
	do
		if [ $arg != '-s' ]
		then
			if [ $option = "list" ]
			then
				echo
				echo -e "${colorBoldWhite}List for '$arg':${colorOff}"
				list=$(grep "^$arg-[a-z]*" "$curDir/build/$mode/Makefile" | grep "$ext\|^[^__]*$" | wc -l)
				if [ $list -eq 0 ]
				then
					echo "   No options available."
				else
					grep "^$arg-[a-z]*" "$curDir/build/$mode/Makefile" | sed 's/://' | sed 's/'$ext'//' | sed 's/'$arg'-//' | grep "$ext\|^[^__]*$" | sed -e 's/^/   /' | sort
				fi
			else
				echo
				echo -e "${colorBoldWhite}Processing '$option $arg':${colorOff}" 
				if [ $(cat "$curDir/build/$mode/Makefile" | grep -w "$option-$arg:" | wc -l) != 0 ]
				then
					make -C $curDir/build/$mode $option-$arg --no-print-directory
				else
					make -C $curDir/build/$mode $option-$arg$ext --no-print-directory
				fi
			fi
		
		fi
	done
}

execIfHelpAsMainOption() {
	if [ $1 = "--help" ] || [ $1 = "-h" ]
	then
		displayHelp
		exit 0
	fi
}

execIfHelpAsSecondOptions() {
	option=$1
	for arg in "${@:2}"
		do
			if [ $arg = "-h" ] || [ $arg = "--help" ]
			then
				displayHelp "$option"
				exit 0
			fi
	done
}

execIfPrefixAsMainOption() {
	if [ $1 = "--prefix" ] || [ $1 = "-p" ]
	then
		displayPrefix
		exit 0
	fi
}

execIfSupport() {
	option=$1
	execIfHelpAsMainOption "$option"
	execIfHelpAsSecondOptions "$option" "${@:2}"
	execIfPrefixAsMainOption "$option"
	execIfUpdateAsMainOption "$option"
}

execIfShorcut() {
	mode=$1
	option=$2
	ext=$3
	if [ $# -eq 3 ] || { [ $# -eq 4 ] && [ $4 = '-s' ] ;}
	then		
		if [ $option = "install" ] || [ $option = "link" ] || [ $option = "upgrade" ]
		then
			execShortcutOS "$mode" "$option" "$ext" "$4"
		elif [ $option = "list" ]
		then
			execShortcutList "$mode" "$4"
		fi
	fi
}

execIfUpdateAsMainOption() {
	if [ $1 = "update" ]
	then
		echo
		echo -e "${colorBoldWhite}Updating Universe:${colorOff}"
		git pull
		exit 0
	fi
}

execShortcutOS() {
	mode=$1
	option=$2
	ext=$3
	displayMode "$mode"
	displayWarnings "$mode" "$option" "$ext" "${@:4}"
	echo
	echo -e "${colorBoldWhite}Processing all '$option' related to your OS:${colorOff}"
	make -C $curDir/build/$mode $option$ext --no-print-directory
	exit $?
}

execShortcutList() {
	mode=$1
	flagServerHost=$2
	$curDir/universe list "$flagServerHost" "install" "upgrade" "link" "command"
	exit $?
}

getMode() {
	i=1
	mode=$localPath
	if [ -n "$SSH_CONNECTION" ]
	then
		mode=$serverClientPath
		for arg in "$@"
		do
			if [ $arg = "-s" ]
			then
				mode=$serverHostPath
				break
			fi
		done
	fi
	echo "$mode"
}


# Executable
## Check options exist
checkOptionsExist "$@"
main=$1
## Check main option valid
checkValidMainOption "$main"
## Get the chosen mode (default -> local OR server/client if using SSH, "-s" -> server/host if using SSH)
mode=$(getMode ${@:2})
## Proceed if it's a support option as the main option
execIfSupport "$main" "${@:2}"
## Proceed if it's a shortcut
execIfShorcut "$mode" "$main" "$ext" "${@:2}"
## Check if the main option has secondary options
checkSecondaryOptionsExist "$main" "${@:2}"
## Display the mode used
displayMode "$mode"
## Display warnings
displayWarnings "$mode" "$main" "$ext" "${@:2}"
## Check the secondary options
checkSecondaryOptions "$mode" "$main" "$ext" "${@:2}"
## Proceed the main option with the secondary options
execOptions "$mode" "$main" "$ext" "${@:2}"