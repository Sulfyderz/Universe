#!/bin/bash
# Variable and constant declaration
curDir=$(dirname "$(realpath "$0")")
env=$(uname)
ext=$([ "$env" = "Darwin" ] && echo "__macOS" || echo "__linux")
extOmit=$([ "$env" = "Darwin" ] && echo "__linux" || echo "__macOS")
client="client"
server="server"
## Color
colorOff='\033[0m'
boldGreen='\033[1;32m'
boldRed='\033[1;31m'
boldWhite='\033[1;37m'
boldYellow='\033[1;33m'


# Function declaration
Help()
{
	# Display Help
	echo "Universe: your world always with you."
	echo
	echo "Syntax: universe [options]"
	echo
	echo "  Options:"
	echo "    install		   Installs a given software handled by Universe and related"
	echo "			   to your OS. If nothing is given, it installs all software"
	echo "			   related to your OS."
	echo "    update		   Updates a software installed with 'install'. If nothing is"
	echo "			   given, it updates all software handled by Universe and"
	echo "			   related to your OS."
	echo "    link		   Setups a configuration file handled by Universe and"
	echo "             		   related to your OS for a given software. If nothing is"
	echo "			   given, it setups all configuration files related to your"
	echo "			   OS."
	echo "    command         	   Applies a command for a specific software, according to"
	echo "             		   your OS."
	echo "    list		   Shows the available options for 'install', 'update', 'link'"
	echo "			   and 'command' related to your OS. If nothing is given, it" 
	echo "			   shows all the options for 'install', 'update', 'link' and"
	echo "			   'command' related to your OS."
	echo "    -h, help		   Prints this help."
}


## No option given
if [ "$#" -eq 0 ]
then
	Help
	exit 0
fi

## Check the main option
if [ $1 != "install" ] && [ $1 != "link" ] && [ $1 != "command" ] && [ $1 != "update" ] && [ $1 != "list" ] && [ $1 != "help" ] && [ $1 != "-h" ]
then
	echo
	echo -e "${boldRed}Error:${colorOff} '$1' Not recognized by universe."
	exit 3
fi

## Check if the option "-s" is given
i=1
mode=$client
for arg in "$@"
do
	if [ $arg = "-s" ]
	then
		mode=$server
	fi
done

## Proceed the main option if no other option is given (other than "-s")
if [ $1 = "help" ] || [ $1 = "-h" ]
then
	if [ "$#" -gt 1 ]
	then
		echo
		echo -e "${boldRed}Error:${colorOff} ${boldWhite}'help'${colorOff} (${boldWhite}-h${colorOff}) doesn't take options."	
		exit 3
	else
		Help
		exit 0
	fi
elif [ "$#" -eq 1 ]
then
	if [ $1 = "install" ] || [ $1 = "link" ] || [ $1 = "update" ]
	then
		echo -e "${boldWhite}Mode:${colorOff} ${boldGreen}Client${colorOff}" 
		echo
		make -C $curDir/build/$mode $1$ext
		exit $?
	elif [ $1 = "list" ]
	then
		$curDir/universe list "install" "update" "link" "command" 
		exit $?
	else
		echo
		echo -e "${boldRed}Error:${colorOff} No option is given to ${boldWhite}'$1'${colorOff}."
		exit 3
	fi
elif [ "$#" -eq 2 ] && [ $2 = '-s' ]
then
	if [ $1 = "install" ] || [ $1 = "link" ] || [ $1 = "update" ]
	then
		echo -e "${boldWhite}Mode:${colorOff} ${boldRed}Server${colorOff}"
		echo
		make -C $curDir/build/$mode $1
		exit $?
	elif [ $1 = "list" ]
	then
		$curDir/universe list "-s" "install" "update" "link" "command"
		exit $?
	fi
fi

## Display the mode used
if [ $mode = $client ]
then
	echo -e "${boldWhite}Mode:${colorOff} ${boldGreen}Client${colorOff}"
else
	echo -e "${boldWhite}Mode:${colorOff} ${boldRed}Server${colorOff}"
	if [ "$env" = "Darwin" ]
	then
		echo
		echo -e "${boldYellow}Warning:${colorOff} macOS doesn't have a server version."
	fi
fi

## Checking the parameters given to the main option
i=1
flag=false
for arg in "$@"
do
	fail=false
	if [ $i != 1 ] && [ $arg != '-s' ]
	then
		if [ $1 = "list" ]
		then
			if [ $arg != "install" ] && [ $arg != "link" ] && [ $arg != "command" ] && [ $arg != "update" ]
			then
				fail=true
			fi
		else
			if [ $(cat "$curDir/build/$mode/Makefile" | grep -w "$1-$arg:" | wc -l) = 0 ] && [ $(cat "$curDir/build/$mode/Makefile" | grep -w "$1-$arg$ext:" | wc -l) = 0 ]
			then
				fail=true
			fi
		fi
		if [ "$fail" = true ]
		then
			if [ "$flag" = false ]
			then
				echo
				flag=true
			fi
			echo -e "${boldRed}Error:${colorOff} ${boldWhite}'$arg'${colorOff} not recognized by ${boldWhite}'$1'${colorOff}."
		fi
	fi
	((i++))
done
if [ "$flag" = true ]
then
	exit 3
fi

## Proceed the other options 
i=1
for arg in "$@"
do
	if [ $i != 1 ] && [ $arg != '-s' ]
	then
		if [ $1 = "list" ]
		then
			echo
			echo -e "${boldWhite}List for '$arg':${colorOff}"
			list=$(grep "^$arg-[a-z]*" "$curDir/build/$mode/Makefile" | grep  -v $extOmit | wc -l)
			if [ $list -eq 0 ]
			then
				echo "   No options available."
			else
				grep "^$arg-[a-z]*" "$curDir/build/$mode/Makefile" | sed 's/://' | sed 's/'$ext'//' | sed 's/'$arg'-//' | grep  -v $extOmit | sed -e 's/^/   /'
			fi
		else
			echo
			echo -e "${boldWhite}Processing '$1 $arg':${colorOff}" 
			if [ $(cat "$curDir/build/$mode/Makefile" | grep -w "$1-$arg:" | wc -l) != 0 ]
			then
				make -C $curDir/build/$mode $1-$arg
			else
				make -C $curDir/build/$mode $1-$arg$ext
			fi
		fi
	
	fi
	((i++))
done
