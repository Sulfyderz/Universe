#!/bin/bash
# Variable and constant declaration
curDir=$(dirname "$(realpath "$0")")
ext=$([ "$(uname)" = "Darwin" ] && echo "__macOS" || echo "__linux")
localPath="local"
serverClientPath="server/client"
serverHostPath="server/host"
## Color
colorOff='\033[0m'
colorBoldGreen='\033[1;32m'
colorBoldRed='\033[1;31m'
colorBoldWhite='\033[1;37m'
colorBoldYellow='\033[1;33m'


# Function declaration
checkArgsExist() {
	if [ $# -eq 0 ]
	then
		displayHelp
		exit 0
	fi
}

checkCommandArgs() {
	mode=$1
	command=$2
	ext=$3
	flag=false
	for arg in ${@:4}
	do
		fail=false
		if [ $arg != '-s' ]
		then
			if [ $command = "list" ]
			then
				if [ $arg != "install" ] && [ $arg != "link" ] && [ $arg != "command" ] && [ $arg != "upgrade" ]
				then
					fail=true
				fi
			else
				if [ $(cat "$curDir/build/$mode/Makefile" | grep -w "$command-$arg:" | wc -l) = 0 ] && [ $(cat "$curDir/build/$mode/Makefile" | grep -w "$command-$arg$ext:" | wc -l) = 0 ]
				then
					fail=true
				fi
			fi
			if [ $fail = true ]
			then
				if [ $flag = false ]
				then
					echo
					flag=true
				fi
				echo -e "${colorBoldRed}Error:${colorOff} ${colorBoldWhite}'$arg'${colorOff} not recognized by ${colorBoldWhite}'$command'${colorOff}."
			fi
		fi
	done
	if [ $flag = true ]
	then
		exit 3
	fi
}

checkCommandArgsExist() {
	command=$1
	if [ $# -eq 1 ] && [ $command != "list" ] && [ $command != "install" ] && [ $command != "link" ] && [ $command != "upgrade" ]
	then
		echo
		echo -e "${colorBoldRed}Error:${colorOff} No argument is given to ${colorBoldWhite}'$command'${colorOff}."
		exit 3
	fi
}

checkValidCommand() {
	command=$1
	commandChoices=("install" "upgrade" "link" "command" "list" "update" "--help" "-h" "--prefix" "-p")
	flag=false
	for commandChoice in ${commandChoices[@]}
	do
		if [ $command = $commandChoice ]
		then
			flag=true
			break
		fi
	done
	if [ $flag = false ]
	then
		echo -e "${colorBoldRed}Error:${colorOff} ${colorBoldWhite}'$command'${colorOff} not recognized by ${colorBoldWhite}Universe${colorOff}."
		exit 3
	fi
}

displayHelp() {
	if [ $# -eq 0 ]
	then
		echo "usage: universe [-h | --help] [-p | --prefix] <command> [<args>]"
		echo
		echo "Universe is a versatile tool that effortlessly transfers software and configuration"
		echo "settings across multiple computers with convenience. It serves as a configuration file"
		echo "manager, a software configurator and a software installer."
		echo
		echo "Commands:"
		echo "    install		   Installs a list of software handled by Universe and related"
		echo "			   to your OS. If nothing is given, it installs all software"
		echo "			   related to your OS."
		echo "    upgrade		   Upgrades a list of software installed with 'install'. If"
		echo "			   nothing is given, it upgrades all software handled by Universe"
		echo "			   and related to your OS."
		echo "    link		   Setups a configuration file handled by Universe and"
		echo "             		   related to your OS for a given software. If nothing is"
		echo "			   given, it setups all configuration files related to your"
		echo "			   OS."
		echo "    command         	   Applies a command for a specific software, according to"
		echo "             		   your OS."
		echo "    list		   Shows the available arguments for a list of commands related"
		echo "			   to your OS. If nothing is given, it shows all the arguments "
		echo "			   for the 'install', 'upgrade', 'link' and 'command' commands"
		echo "			   related to your OS."
		echo "    update		   Updates Universe."
		echo
		echo "Options:"
		echo "    -p, --prefix	   Shows the Universe folder and exit."
		echo "    -h, --help		   Shows this help message and exit."
	elif [ $1 = "install" ]
	then
		echo "usage: universe install [-h | --help] [-s] [<args>]"
		echo
		echo "Installs a list of software handled by Universe and related to your OS. If nothing is"
		echo "given, it installs all software related to your OS. To see what you can install,"
		echo "call the command 'universe list [-s] install'."
		echo
		echo "Options:"
		echo "    -h, --help		   Shows this help message and exit."
		echo "    -s			   Enables the server host mode (only available on remote"
		echo "			   machine)."
	elif [ $1 = "upgrade" ]
	then
		echo "usage: universe upgrade [-h | --help] [-s] [<args>]"
		echo
		echo "Upgrades a list of software installed with the command 'universe install'. If nothing is"
		echo "given, it upgrades all software handled by Universe and related to your OS. To see what "
		echo "you can upgrade, call the command 'universe list [-s] upgrade'."
		echo
		echo "Options:"
		echo "    -h, --help		   Shows this help message and exit."
		echo "    -s			   Enables the server host mode (only available on remote"
		echo "			   machine)."
	elif [ $1 = "link" ]
	then
		echo "usage: universe link [-h | --help] [-s] [<args>]"
		echo
		echo "Setups a configuration file handled by Universe and related to your OS for a given"
		echo "software. If nothing is given, it setups all configuration files related to your"
		echo "OS. To see what you can setup, call the command 'universe list [-s] link'."
		echo
		echo "Options:"
		echo "    -h, --help		   Shows this help message and exit."
		echo "    -s			   Enables the server host mode (only available on remote"
		echo "			   machine)."
	elif [ $1 = "command" ]
	then
		echo "usage: universe command [-h | --help] [-s] [<args>]"
		echo
		echo "Applies a command for a specific software, according to your OS. To see what you can"
		echo "setup, call the command 'universe list [-s] command'."
		echo
		echo "Options:"
		echo "    -h, --help		   Shows this help message and exit."
		echo "    -s			   Enables the server host mode (only available on remote"
		echo "			   machine)."
	elif [ $1 = "list" ]
	then
		echo "usage: universe list [-h | --help] [-s] <commands>"
		echo
		echo "Shows the available arguments for 'install', 'upgrade', 'link' and 'command' related to"
		echo "your OS. If nothing is given, it shows all the arguments for 'install', 'upgrade',"
		echo "'link' and 'command' related to your OS."
		echo
		echo "Commands:"
		echo "    install		   Shows the available arguments for the 'universe install'"
		echo "			   command related to your OS."
		echo "    upgrade		   Shows the available arguments for the 'universe upgrade'"
		echo "			   command related to your OS."
		echo "    link		   Shows the available arguments for the 'universe link'"
		echo "			   command related to your OS."
		echo "    command         	   Shows the available arguments for the 'universe command'"
		echo "			   command related to your OS."
		echo
		echo "Options:"
		echo "    -h, --help		   Shows this help message and exit."
		echo "    -s			   Enables the server host mode (only available on remote"
		echo "			   machine)."
	elif [ $1 = "update" ]
	then
		echo "usage: universe update [-h | --help]"
		echo
		echo "Updates Universe to its last version."
		echo
		echo "Options:"
		echo "    -h, --help		   Shows this help message and exit."
	fi
}

displayMode() {
	mode=$1
	if [ $mode = $localPath ]
	then
		echo -e "${colorBoldWhite}Mode:${colorOff} ${colorBoldGreen}Local${colorOff}"
	elif [ $mode = $serverClientPath ]
	then
		echo -e "${colorBoldWhite}Mode:${colorOff} ${colorBoldYellow}Server (Client)${colorOff}"
	else
		echo -e "${colorBoldWhite}Mode:${colorOff} ${colorBoldRed}Server (Host)${colorOff}"
	fi
}

displayPrefix() {
	echo $curDir
}

displayWarnings() {
	mode=$1
	command=$2
	ext=$3
	displayWarningServerButNotSSH $mode ${@:4}
}

displayWarningServerButNotSSH() {
	mode=$1
	if [ $mode = $localPath ]
	then
		for arg in "${@:2}"
			do
				if [ $arg = "-s" ]
				then
					echo -e "${colorBoldYellow}Warning:${colorOff} ${colorBoldWhite}'-s' option is only available on remote machine. Ignored.${colorOff}"
					break
				fi
		done
	fi
}

execCommand() {
	mode=$1
	command=$2
	ext=$3
	for arg in ${@:4}
	do
		if [ $arg != '-s' ]
		then
			if [ $command = "list" ]
			then
				echo
				echo -e "${colorBoldWhite}List for '$arg':${colorOff}"
				list=$(grep "^$arg-[a-z]*" "$curDir/build/$mode/Makefile" | grep "$ext\|^[^__]*$" | wc -l)
				if [ $list -eq 0 ]
				then
					echo "   No arguments available."
				else
					grep "^$arg-[a-z]*" "$curDir/build/$mode/Makefile" | sed 's/://' | sed 's/'$ext'//' | sed 's/'$arg'-//' | grep "$ext\|^[^__]*$" | sed -e 's/^/   /' | sort
				fi
			else
				echo
				echo -e "${colorBoldWhite}Processing '$command $arg':${colorOff}" 
				if [ $(cat "$curDir/build/$mode/Makefile" | grep -w "$command-$arg:" | wc -l) != 0 ]
				then
					make -C $curDir/build/$mode $command-$arg --no-print-directory
				else
					make -C $curDir/build/$mode $command-$arg$ext --no-print-directory
				fi
			fi
		
		fi
	done
}

execIfHelpOption() {
	if [ $1 = "--help" ] || [ $1 = "-h" ]
	then
		displayHelp
		exit 0
	fi
}

execIfHelpCommandOption() {
	command=$1
	for arg in "${@:2}"
	do
		if [ $arg = "-h" ] || [ $arg = "--help" ]
		then
			displayHelp "$command"
			exit 0
		fi
	done
}

execIfPrefixOption() {
	if [ $1 = "--prefix" ] || [ $1 = "-p" ]
	then
		displayPrefix
		exit 0
	fi
}

execIfSupport() {
	command=$1
	execIfHelpOption "$command"
	execIfHelpCommandOption "$command" "${@:2}"
	execIfPrefixOption "$command"
	execIfUpdateAsCommand "$command"
}

execIfShorcut() {
	mode=$1
	command=$2
	ext=$3
	if [ $# -eq 3 ] || { [ $# -eq 4 ] && [ $4 = '-s' ] ;}
	then		
		if [ $command = "install" ] || [ $command = "link" ] || [ $command = "upgrade" ]
		then
			execShortcutOS "$mode" "$command" "$ext" "$4"
		elif [ $command = "list" ]
		then
			execShortcutList "$mode" "$4"
		fi
	fi
}

execIfUpdateAsCommand() {
	if [ $1 = "update" ]
	then
		echo
		echo -e "${colorBoldWhite}Updating Universe:${colorOff}"
		git -C $curDir pull
		exit 0
	fi
}

execShortcutOS() {
	mode=$1
	command=$2
	ext=$3
	displayMode "$mode"
	displayWarnings "$mode" "$command" "$ext" "${@:4}"
	echo
	echo -e "${colorBoldWhite}Processing all '$command' related to your OS:${colorOff}"
	make -C $curDir/build/$mode $command$ext --no-print-directory
	exit $?
}

execShortcutList() {
	mode=$1
	serverHostOption=$2
	$curDir/universe list "$serverHostOption" "install" "upgrade" "link" "command"
	exit $?
}

getMode() {
	i=1
	mode=$localPath
	if [ -n "$SSH_CONNECTION" ]
	then
		mode=$serverClientPath
		for arg in "$@"
		do
			if [ $arg = "-s" ]
			then
				mode=$serverHostPath
				break
			fi
		done
	fi
	echo "$mode"
}


# Executable
## Check arguments exist
checkArgsExist $@
command=$1
## Check valid command
checkValidCommand $command
## Get the chosen mode (default -> local OR server/client if using SSH, "-s" -> server/host if using SSH)
mode=$(getMode ${@:2})
## Proceed if it's an option or the update command
execIfSupport $command ${@:2}
## Proceed if it's a shortcut
execIfShorcut $mode $command $ext ${@:2}
## Check if the command arguments exist
checkCommandArgsExist $command ${@:2}
## Display the mode used
displayMode $mode
## Display warnings
displayWarnings $mode $command $ext ${@:2}
## Check the command arguments
checkCommandArgs $mode $command $ext ${@:2}
## Proceed the command with its arguments
execCommand $mode $command $ext ${@:2}